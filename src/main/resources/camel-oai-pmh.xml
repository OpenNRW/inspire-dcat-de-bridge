<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">

    <!-- spring camel bridge property placeholder -->
    <bean id="propertyConfigurer" class="org.apache.camel.spring.spi.BridgePropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:camel-oai-pmh.properties</value>
                <value>file:/opt/app/inspire-bridge/config/camel-oai-pmh.properties</value>
            </list>
        </property>
        <property name="ignoreResourceNotFound" value="true" />
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
     </bean>

    <bean id="uriResolverFactory" class="eu.odp.harvest.geo.oai.xslt.HttpAwareUriResolverFactory">
        <property name="producer" ref="template"/>
    </bean>

    <!-- Camel context for this application -->
    <camelContext xmlns="http://camel.apache.org/schema/spring" xmlns:oai="http://www.openarchives.org/OAI/2.0/">

        <template id="template"/>

        <!-- internal endpoint of processing route for csw catalogs -->
        <endpoint id="csw" uri="direct:csw"/>
        <!-- internal endpoint of processing route for CKAN catalogs -->
        <endpoint id="ckan" uri="direct:ckan"/>
        <!-- internal endpoint of processing route for INSPIRE catalogs -->
        <endpoint id="inspire" uri="direct:inspire"/>
        <!-- internal endpoint of processing route for INSPIRE catalogs via POST -->
        <endpoint id="inspirePost" uri="direct:inspirePost"/>
        <!-- internal endpoint of processing route for RDF INSPIRE requests -->
        <endpoint id="rdfInspireRequest" uri="direct:rdfInspireRequest"/>
        <!-- internal endpoint of processing route for INSPIRE catalogs via SOAP 1.1 -->
        <endpoint id="inspireSoap11" uri="direct:inspireSoap11"/>
        <!-- internal endpoint of processing route for INSPIRE catalogs via SOAP 1.2 -->
        <endpoint id="inspireSoap12" uri="direct:inspireSoap12"/>

        <!-- endpoint for harvester type management -->
        <endpoint id="mgmtHarvesterTypes" uri="servlet:///mgmt/harvester-types"/>

        <!-- endpoint for harvester nrw csw catalog -->
        <endpoint id="cswHarvesters" uri="servlet:///gp-csw"/>
        <endpoint id="cswIds" uri="servlet:///gp-csw/listIdentifiers"/>
        <endpoint id="cswRecords" uri="servlet:///gp-csw/listRecords"/>
        <endpoint id="cswRecord" uri="servlet:///gp-csw/getRecord"/>
        <endpoint id="rdfCatalog" uri="servlet:///gp-csw/catalog.rdf"/>
        <endpoint id="rdfDataset" uri="servlet:///gp-csw/rdf/?matchOnUriPrefix=true"/>

        <!-- endpoint for harvester nrw ckan catalog -->
        <endpoint id="ckanHarvesters" uri="servlet:///gp-ckan"/>
        <endpoint id="ckanIds" uri="servlet:///gp-ckan/listIdentifiers"/>
        <endpoint id="ckanRecords" uri="servlet:///gp-ckan/listRecords"/>
        <endpoint id="ckanRecord" uri="servlet:///gp-ckan/getRecord"/>

        <onException>
            <exception>java.lang.Exception</exception>
            <handled>
                <constant>true</constant>
            </handled>
            <log loggingLevel="ERROR" message="${exception.stacktrace}" logName="error"/>
            <setBody>
                <constant>&lt;error&gt;Internal error, please check the log files&lt;/error&gt;</constant>
            </setBody>
            <removeHeaders pattern="*"/>
            <setHeader name="CamelHttpResponseCode">
                <constant>500</constant>
            </setHeader>
        </onException>

        <!-- route for INSPIRE catalogs -->
        <route>
            <from uri="ref:inspire"/>
            <setHeader name="response_date">
                <simple>${date:now:yyyy-MM-dd'T'HH:mm:ss'Z'}</simple>
            </setHeader>
            <setHeader name="cswServiceShowMetadataBaseUrl">
                <simple>{{csw.serviceShowMetadata.URL}}</simple>
            </setHeader>
            <setHeader name="sortResults">
                <simple>{{db.item.csw.sortResults}}</simple>
            </setHeader>
            <setHeader name="hopCount">
                <simple>{{db.item.csw.hopCount}}</simple>
            </setHeader>
            <removeHeader name="page"/>
            <removeHeader name="cookie"/>
            <!-- we need some element for xsl input, but the result only depends on header (request) parameters -->
            <setBody>
                <constant>&lt;dummy/&gt;</constant>
            </setBody>
            <to uri="xslt:inspireRequest.xsl"/>
            <removeHeader name="CamelHttpQuery"/>
            <to uri="log:input"/>
            <choice>
                <when>
                    <!-- Only send a GetRecords request to the target catalog if we have not already created an OAI-PMH response -->
                    <xpath>count(/oai:OAI-PMH) = 0</xpath>
                    <to uri="ref:inspirePost"/>
                    <!-- transform the GetRecordsResponse -->
                    <choice>
                        <when>
                            <simple>${header.out} == null || ${header.out} != 'csw'</simple>
                            <to uri="xslt:inspireResponse.xsl?uriResolverFactory=uriResolverFactory"/>
                        </when>
                    </choice>
                </when>
            </choice>
            <removeHeaders pattern="*"/>
            <setHeader name="Content-Type">
                <constant>text/xml</constant>
            </setHeader>
        </route>

        <route>
            <from uri="ref:inspirePost"/>
            <setHeader name="CamelHttpMethod">
                <constant>POST</constant>
            </setHeader>
            <choice>
                <when>
                    <simple>${header.soapVersion} == '1.1'</simple>
                    <setHeader name="Content-Type">
                        <constant>text/xml</constant>
                    </setHeader>
                </when>
                <when>
                    <simple>${header.soapVersion} == '1.2'</simple>
                    <setHeader name="Content-Type">
                        <constant>application/soap+xml</constant>
                    </setHeader>
                </when>
                <otherwise>
                    <setHeader name="Content-Type">
                        <constant>application/xml</constant>
                    </setHeader>
                </otherwise>
            </choice>
            <!-- Replaced dynamically with the target catalog URL -->
            <to uri="http://dummy?httpClient.SocketTimeout=180000&amp;useSystemProperties=true"/>
        </route>

        <!-- route for INSPIRE catalogs via SOAP 1.1 -->
        <route>
            <from uri="ref:inspireSoap11"/>
            <setHeader name="soapVersion">
                <simple>1.1</simple>
            </setHeader>
            <setHeader name="SOAPAction">
                <constant>http://www.opengis.net/cat/csw/2.0.2/requests#GetRecords</constant>
            </setHeader>
            <to uri="ref:inspire"/>
        </route>

        <!-- route for INSPIRE catalogs via SOAP 1.2 -->
        <route>
            <from uri="ref:inspireSoap12"/>
            <setHeader name="soapVersion">
                <simple>1.2</simple>
            </setHeader>
            <setHeader name="SOAPAction">
                <constant>http://www.opengis.net/cat/csw/2.0.2/requests#GetRecords</constant>
            </setHeader>
            <to uri="ref:inspire"/>
        </route>

        <!-- this route retrieves the coupled services from a CSW for datasets based on the datasets' resource identifiers.
         The resource identifiers are required input and must be passed to this route as header "resourceIdentifiers" in
         the format "id1|id2|id3|..." -->
        <route>
            <from uri="direct:getCoupledServices"/>
            <setHeader name="hopCount">
                <simple>{{db.item.csw.hopCount}}</simple>
            </setHeader>
            <setBody>
                <constant>&lt;dummy/&gt;</constant>
            </setBody>
            <to uri="xslt:coupledServices.xsl"/>
            <convertBodyTo type="java.lang.String"/>
            <to uri="log:input"/>
            <setHeader name="CamelHttpUri">
                <simple>{{db.item.csw.URL}}</simple>
            </setHeader>
            <choice>
                <when>
                    <simple>${header.soapVersion} == '1.1'</simple>
                    <setHeader name="Content-Type">
                        <constant>text/xml</constant>
                    </setHeader>
                </when>
                <when>
                    <simple>${header.soapVersion} == '1.2'</simple>
                    <setHeader name="Content-Type">
                        <constant>application/soap+xml</constant>
                    </setHeader>
                </when>
                <otherwise>
                    <setHeader name="Content-Type">
                        <constant>application/xml;charset=UTF-8</constant>
                    </setHeader>
                </otherwise>
            </choice>
            <setHeader name="CamelHttpMethod">
                <constant>POST</constant>
            </setHeader>
            <to uri="http://dummy?httpClient.SocketTimeout=180000&amp;useSystemProperties=true"/>
        </route>

        <!-- route for INSPIRE catalogs via SOAP 1.1 -->
        <route>
            <from uri="direct:getCoupledServicesSoap11"/>
            <setHeader name="soapVersion">
                <simple>1.1</simple>
            </setHeader>
            <setHeader name="SOAPAction">
                <constant>http://www.opengis.net/cat/csw/2.0.2/requests#GetRecords</constant>
            </setHeader>
            <to uri="direct:getCoupledServices"/>
        </route>

        <!-- route for INSPIRE catalogs via SOAP 1.2 -->
        <route>
            <from uri="direct:getCoupledServicesSoap12"/>
            <setHeader name="soapVersion">
                <simple>1.2</simple>
            </setHeader>
            <setHeader name="SOAPAction">
                <constant>http://www.opengis.net/cat/csw/2.0.2/requests#GetRecords</constant>
            </setHeader>
            <to uri="direct:getCoupledServices"/>
        </route>

        <!-- management route for harvester types -->
        <route>
            <from uri="ref:mgmtHarvesterTypes"/>
            <setBody>
                <simple>resource:classpath:/harvester-types.xml</simple>
            </setBody>
            <removeHeaders pattern="*"/>
            <setHeader name="Content-Type">
                <constant>text/xml</constant>
            </setHeader>
        </route>

        <!-- generic route for nrw csw harvesters -->
        <route>
            <from uri="ref:csw"/>
            <setHeader name="CamelHttpUri">
                <simple>{{db.item.csw.URL}}</simple>
            </setHeader>
            <setHeader name="CamelHttpPath">
                <constant/>
            </setHeader>
            <choice>
                <when>
                    <simple>${header.metadataPrefix} == null</simple>
                    <setHeader name="metadataPrefix">
                        <simple>dcat_ap</simple>
                    </setHeader>
                </when>
            </choice>
            <recipientList>
                <simple>{{db.item.csw.TYPE}}</simple>
            </recipientList>
        </route>

        <route>
            <from uri="ref:rdfInspireRequest"/>
            <removeHeader name="resumptionToken"/>

            <setHeader name="CamelHttpUri">
                <simple>{{db.item.csw.URL}}</simple>
            </setHeader>
            <setHeader name="CamelHttpPath">
                <constant/>
            </setHeader>
            <setHeader name="sortResults">
                <simple>{{db.item.csw.sortResults}}</simple>
            </setHeader>
            <setHeader name="hopCount">
                <simple>{{db.item.csw.hopCount}}</simple>
            </setHeader>
            <setHeader name="metadataPrefix">
                <simple>dcat_ap</simple>
            </setHeader>
            <setHeader name="response_date">
                <simple>${date:now:yyyy-MM-dd'T'HH:mm:ss'Z'}</simple>
            </setHeader>

            <removeHeader name="CamelHttpQuery"/>
            <removeHeader name="cookie"/>
            <removeHeader name="set"/>

            <!-- we need some element for xsl input, but the result only depends on header (request) parameters -->
            <setBody>
                <constant>&lt;dummy/&gt;</constant>
            </setBody>
            <to uri="xslt:inspireRequest.xsl"/>
            <to uri="log:input"/>
            <to uri="ref:inspirePost"/>
        </route>

        <route>
            <from uri="ref:rdfCatalog"/>
            <setHeader name="verb">
                <simple>ListRecords</simple>
            </setHeader>

            <to uri="ref:rdfInspireRequest"/>

            <!-- transform the GetRecordsResponse -->
            <setHeader name="baseCatalogUri">
                <simple>{{rdf.catalog.base.url}}</simple>
            </setHeader>
            <setHeader name="contributorID">
                <simple>{{dcatde.contributorID}}</simple>
            </setHeader>
            <setHeader name="cswServiceShowMetadataBaseUrl">
                <simple>{{csw.serviceShowMetadata.URL}}</simple>
            </setHeader>

            <to uri="xslt:inspireResponseDcatCatalog.xsl?uriResolverFactory=uriResolverFactory"/>

            <removeHeaders pattern="*"/>
            <setHeader name="Content-Type">
                <constant>application/rdf+xml</constant>
            </setHeader>
        </route>

        <route>
            <from uri="ref:rdfDataset"/>
            <setHeader name="verb">
                <simple>GetRecord</simple>
            </setHeader>
            <setHeader name="identifier">
                <simple>${header.CamelHttpPath.replaceAll('.rdf', '')}</simple>
            </setHeader>

            <to uri="ref:rdfInspireRequest"/>

            <to uri="xslt:inspireResponseDcatDataset.xsl?uriResolverFactory=uriResolverFactory"/>

            <choice>
                <when>
                    <xpath>error[text()='not found']</xpath>
                    <removeHeaders pattern="*"/>
                    <setBody>
                        <constant>not found</constant>
                    </setBody>
                    <setHeader name="CamelHttpResponseCode">
                        <constant>404</constant>
                    </setHeader>
                </when>
                <otherwise>
                    <removeHeaders pattern="*"/>
                    <setHeader name="Content-Type">
                        <constant>application/rdf+xml</constant>
                    </setHeader>
                </otherwise>
            </choice>
        </route>

        <route>
            <from uri="ref:cswHarvesters"/>
            <to uri="ref:csw"/>
        </route>

        <route>
            <from uri="ref:cswIds"/>
            <setHeader name="verb">
                <simple>ListIdentifiers</simple>
            </setHeader>
            <to uri="ref:csw"/>
        </route>

        <route>
            <from uri="ref:cswRecords"/>
            <setHeader name="verb">
                <simple>ListRecords</simple>
            </setHeader>
            <to uri="ref:csw"/>
        </route>

        <route>
            <from uri="ref:cswRecord"/>
            <setHeader name="verb">
                <simple>GetRecord</simple>
            </setHeader>
            <to uri="ref:csw"/>
        </route>

        <route>
            <from uri="ref:ckan"/>
            <setHeader name="response_date">
                <simple>${date:now:yyyy-MM-dd'T'HH:mm:ss'Z'}</simple>
            </setHeader>
            <choice>
                <when>
                    <simple>${header.metadataPrefix} == null</simple>
                    <setHeader name="metadataPrefix">
                        <simple>iso19139</simple>
                    </setHeader>
                </when>
            </choice>
            <setHeader name="db.item.ckan.URL">
                <simple>{{db.item.ckan.URL}}</simple>
            </setHeader>
            <setBody>
                <constant>&lt;dummy/&gt;</constant>
            </setBody>
            <to uri="xslt:jsonPackageRequest.xsl"/>
            <to uri="log:input"/>
            <choice>
                <when>
                    <!-- Only send a GetRecords request to the target catalog if we have not already created an OAI-PMH response -->
                    <xpath>count(/oai:OAI-PMH) = 0</xpath>
                    <setHeader name="CamelHttpMethod">
                        <constant>GET</constant>
                    </setHeader>
                    <setHeader name="CamelHttpPath">
                        <constant/>
                    </setHeader>
                    <setHeader name="CamelHttpUri">
                        <xpath>/parameters/parameter[name='httpUri']/value/text()</xpath>
                    </setHeader>
                    <setHeader name="CamelHttpQuery">
                        <xpath>/parameters/parameter[name='httpQuery']/value/text()</xpath>
                    </setHeader>

                    <!--<removeHeader name="verb"/>-->
                    <!--<removeHeader name="from"/>-->
                    <!--<removeHeader name="until"/>-->
                    <!--<removeHeader name="identifier"/>-->
                    <!--<removeHeader name="metadataPrefix"/>-->
                    <!--<removeHeader name="resumptionToken"/>-->

                    <!-- Replaced dynamically with the target catalog URL -->
                    <to uri="http://dummy?httpClient.SocketTimeout=180000&amp;useSystemProperties=true"/>
                    <!-- transform the csw -->
                    <convertBodyTo type="java.lang.String"/>
                    <setHeader name="json">
                        <simple>${body}</simple>
                    </setHeader>
                    <setBody>
                        <constant>&lt;dummy/&gt;</constant>
                    </setBody>
                    <choice>
                        <when>
                            <simple>${header.out} == null || ${header.out} != 'dcat'</simple>
                            <to uri="xslt:jsonPackageResponse.xsl?uriResolverFactory=uriResolverFactory"/>
                        </when>
                    </choice>
                </when>
            </choice>
            <removeHeaders pattern="*"/>
            <setHeader name="Content-Type">
                <constant>text/xml</constant>
            </setHeader>
        </route>

        <!-- generic route for nrw ckan harvesters -->
        <route>
            <from uri="ref:ckanHarvesters"/>
            <to uri="ref:ckan"/>
        </route>

        <route>
            <from uri="ref:ckanIds"/>
            <setHeader name="verb">
                <simple>ListIdentifiers</simple>
            </setHeader>
            <to uri="ref:ckan"/>
        </route>

        <route>
            <from uri="ref:ckanRecords"/>
            <setHeader name="verb">
                <simple>ListRecords</simple>
            </setHeader>
            <to uri="ref:ckan"/>
        </route>

        <route>
            <from uri="ref:ckanRecord"/>
            <setHeader name="verb">
                <simple>GetRecord</simple>
            </setHeader>
            <to uri="ref:ckan"/>
        </route>
    </camelContext>
</beans>
